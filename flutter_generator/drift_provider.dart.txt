import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';

part 'drift_provider.g.dart';

class DataUnits extends Table {
  IntColumn get id => integer().autoIncrement()();
  @JsonKey('unit_code')
  TextColumn get unitCode => text().named("unit_code").unique()();
  @JsonKey('unit_name')
  TextColumn get unitName => text().named("unit_name")();
  @JsonKey('model_no')
  TextColumn get model => text().named("model_no")();
  @JsonKey('region_code')
  TextColumn get project => text().named("region_code")();
  @JsonKey('dept_code')
  TextColumn get costCenter => text().named("dept_code")();
}

@DriftDatabase(tables: [DataUnits])
class DriftProvider extends _$DriftProvider {
  DriftProvider() : super(_openConnection());

  @override
  int get schemaVersion => 1;

  //version 1 : add table dataunit

  @override
  MigrationStrategy get migration {
    return MigrationStrategy(
      onCreate: (Migrator m) async {
        await m.createAll();
      },
      onUpgrade: (Migrator m, int from, int to) async {
        // if (from < 3) {
        //   await m.createTable(projectAreas);
        //   await m.alterTable(TableMigration(notificationEntries));
        // }
      },
    );
  }
}

LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    return NativeDatabase.createInBackground(file);
  });

  // return LazyDatabase(() async {
  //   final result = await WasmDatabase.open(
  //     databaseName: 'my_app_db', // prefer to only use valid identifiers here
  //     sqlite3Uri: Uri.parse('sqlite3.wasm'),
  //     driftWorkerUri: Uri.parse('drift_worker.dart.js'),
  //   );

  //   if (result.missingFeatures.isNotEmpty) {
  //     print('Using ${result.chosenImplementation} due to missing browser '
  //         'features: ${result.missingFeatures}');
  //   }

  //   return result.resolvedExecutor;
  // });
}
